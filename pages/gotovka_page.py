from PyQt5 import QtWidgets, QtCore
import pyautogui
import os
from widgets.common import CommonLogger, ScriptController, CommonUI
import threading

BASE_ASSETS_PATH = "assets/cook/"
RECIPES = {
    "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏": [
        ("frukti.png", "right"),
        ("voda2.png", "right"),
        ("whisk2.png", "right"),
        ("startCoocking.png", "left")
    ],
    "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç": [
        ("frukti.png", "right"),
        ("knife2.png", "right"),
        ("startCoocking.png", "left")
    ],
    "–û–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç": [
        ("ovoshi.png", "right"),
        ("knife2.png", "right"),
        ("startCoocking.png", "left")
    ],
    "–û–≤–æ—â–Ω–æ–π —Å–º—É–∑–∏": [
        ("ovoshi.png", "right"),
        ("voda2.png", "right"),
        ("whisk2.png", "right"),
        ("startCoocking.png", "left")
    ],
    "–†–∞–≥—É": [
        ("myaso.png", "right"),
        ("ovoshi.png", "right"),
        ("voda2.png", "right"),
        ("fire2.png", "right"),
        ("startCoocking.png", "left")
    ]
}

class GotovkaPage(QtWidgets.QWidget):
    statusChanged = QtCore.pyqtSignal(bool)
    def __init__(self):
        super().__init__()
        self.worker: GotovkaWorker | None = None
        self._init_ui()

    def _init_ui(self):
        layout = QtWidgets.QVBoxLayout(self)
        layout.setContentsMargins(20, 15, 20, 15)

        header, self.switch = CommonUI.create_switch_header("–ì–æ—Ç–æ–≤–∫–∞", "üçú")
        self.switch.clicked.connect(self.handle_toggle)
        self.switch.clicked.connect(self.statusChanged.emit)
        layout.addLayout(header)

        settings_group, settings_layout = CommonUI.create_settings_group()

        dish_layout, self.dish_combo = CommonUI.create_combo("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", list(RECIPES.keys()))
        settings_layout.addLayout(dish_layout)

        settings_group.setLayout(settings_layout)
        layout.addWidget(settings_group)
        layout.addStretch()

        self.log_output = CommonUI.add_log_field(layout)


    def handle_toggle(self):
        selected_dish = self.dish_combo.currentText()
        ScriptController.toggle_script(
            widget=self,
            worker_factory=lambda: GotovkaWorker(selected_dish),
            log_output=self.log_output
        )

class GotovkaWorker(QtCore.QThread):
    log_signal = QtCore.pyqtSignal(str)

    def __init__(self, dish_name: str):
        super().__init__()
        self._stop = threading.Event()
        self.running = True
        self.dish_name = dish_name
        self.confidence = 0.85
        self.cycles_count = 0

    def log(self, message: str):
        CommonLogger.log(message, self.log_signal)

    def _find_and_perform_action(self, image_filename: str, click_type: str) -> bool:
        full_image_path = os.path.join(BASE_ASSETS_PATH, image_filename)
        try:
            location = pyautogui.locateCenterOnScreen(full_image_path, confidence=self.confidence)
            if location:
                if click_type == "right":
                    pyautogui.rightClick(location)
                    self.log(f"[‚úì] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω/–ø–µ—Ä–µ—Ç–∞—â–µ–Ω: {image_filename}.")
                elif click_type == "left":
                    pyautogui.click(location)
                    self.log(f"[‚úì] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: {image_filename}.")
                return True
            else:
                self.log(f"[!] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_filename}.")
                return False
        except Exception as e:
            return False

    def _execute_recipe(self) -> bool:
        recipe_steps = RECIPES.get(self.dish_name)
        for image_filename, action_type in recipe_steps:
            if not self.running:
                return False
            if not self._find_and_perform_action(image_filename, action_type):
                return False
            self._stop.wait(0.1)

        self.log(f"[‚úì] –í—Å–µ —à–∞–≥–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è '{self.dish_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")
        return True

    def run(self):
        self.log(f"[‚Üí] –°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –±–ª—é–¥–∞: {self.dish_name}")
        rage_window_missing = True
        waiting_for_recipe_elements = False

        try:
            while self.running:
                if not CommonLogger.is_rage_mp_active():
                    if not rage_window_missing:
                        self.log("[!] –û–∫–Ω–æ RAGE Multiplayer –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ...")
                        rage_window_missing = True
                    self._stop.wait(1)
                    continue
                else:
                    if rage_window_missing:
                        self.log("[‚úì] –û–∫–Ω–æ RAGE Multiplayer –∞–∫—Ç–∏–≤–Ω–æ.")
                        rage_window_missing = False

                if self._execute_recipe():
                    self.cycles_count += 1
                    self.log(f"[‚úì] –¶–∏–∫–ª –≥–æ—Ç–æ–≤–∫–∏ ‚Ññ{self.cycles_count} –¥–ª—è '{self.dish_name}' –∑–∞–≤–µ—Ä—à—ë–Ω.")
                    self.log("–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ (5.5 —Å–µ–∫—É–Ω–¥)...")
                    waiting_for_recipe_elements = False
                    self._stop.wait(5.5)
                else:
                    if not waiting_for_recipe_elements:
                        self.log(f"[!] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è '{self.dish_name}'...")
                        waiting_for_recipe_elements = True
                    self._stop.wait(1)

        except Exception as exc:
            self.log(f"[–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞] {exc}")
        finally:
            if self.running:
                self.log("[‚ñ†] –°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.")

